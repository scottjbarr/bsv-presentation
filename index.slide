BSV Package

Making it easier to work with Bitcoin SV in Go.

28 Aug 2019
Tags: go golang bitcoin bsv tokenized

Scott Barr


* Who am I?

- Founder and Head of Engineering at [[https://tokenized.com][Tokenized.com]]
- Still loves building systems!
- Performance matters
- Go, Python, Javascript (and a bunch of others!)
- [[https://twitter.com/scottjbarr][@scottjbarr]]


* Tokenized

"Tokenized is the easiest and safest way to issue, manage and trade security and utility tokens on the Bitcoin SV network."

.image images/tokenized-logo.png


* Why Bitcoin SV?

Some of the big reasons.

- Adheres to the original [[http://bitcoin.org/bitcoin.pdf][Bitcoin White Paper]] by Satoshi Nakamoto
- Companies and community
- Fast, low fees
- Massive scaling
- Stress Test Network
- `OP_RETURN`


* A Little Bit About Bitcoin (SV)

.image images/fork-timeline.jpg


* Anatomy of a Bitcoin Transaction

- [[https://whatsonchain.com/tx/c827849736510a8efb75649aa4e9bc12c822e97399b0a33771f2d8ee34ccde4b][A simple TX]]


* Data in your TX

Using `OP_RETURN` you can put information in transactions.

- Text
- JSON
- Binary data
- Images
- Documents


* Bitcoin Transaction With OP_RETURN Data

- [[https://whatsonchain.com/tx/afdba0969e85ea2ae2547629439ba21dee694c46986b0c1a289b4677c9df8569][TX with OP_RETURN]]


* Mixing Money and Data

If you have data in your money, your data is literally worth something.

Data in the TX may be more valuable than the small amount needed to send the TX.


* OP_RETURN Limits

Current `OP_RETURN` limit is 2GB.

Feb 2020 will see all remaining limits removed as part of the "Genesis" upgrade which plans to remove all limits introduced by the Bitcoin core team.


* The BSV Package

A small project to make life easier when working with Bitcoin transations in Go.

Inspired by the excellent [[https://github.com/moneybutton/bsv][Javascript package]] by Money Button.

Still a work in progress, lots of new powers coming.


* Why?

Working with Bitcoin should be easier.


* Examples


* Add TX Input

Add an input to your TX.

You'll need a [[https://stn.whatsonchain.com/tx/c762a29a4beb4821ad843590c3f11ffaed38b7eadc74557bdf36da3539921531][UTXO]].

.code code/builder_example.go /^func AddInput/,/^}/




* Add Outputs

Add outputs to your TX.

.code code/builder_example.go /^func AddOutputs/,/^}/


* Add OP_RETURN

Example showing how to add `OP_RETURN` data to your TX.

.code code/builder_example.go /^func OpReturnData/,/^}/


* Signing

Signing your TX.

.code code/builder_example.go /^func Sign/,/^}/


* Serializing

Serialize the TX. This is what you send to the network.

.code code/builder_example.go /^func Serialize/,/^}/


* Thanks!

* References and Resources

- [[https://github.com/scottjbarr/bsv-presentation]]
- [[https://github.com/scottjbarr/bsv]]
- [[https://tokenized.com][Tokenized]]
- [[https://bitcoin.org/bitcoin.pdf][The Bitcoin White Paper]]
- [[https://github.com/electrumsv/electrumsv][Electrum SV Wallet]]
- [[https://bitcoinscaling.io/][Bitcoin SV Stress Test Network]]
- [[https://faucet.bitcoinscaling.io/][STN Faucet]]
- [[https://github.com/moneybutton/bsv][Money Button BSV library]]
- [[https://en.bitcoin.it/wiki/Protocol_documentation][Bitcoin Protocol Documentation]]
